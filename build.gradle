/*
 * cs build script
 * library dependencies need to be updated accordingly
 */

apply plugin: 'war'
apply plugin: 'java'
apply plugin: 'maven-publish'

configurations.all {
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
        resolutionStrategy.cacheDynamicVersionsFor 0, 'seconds'
}

allprojects {
        // buildLabel is passed in through bamboo or command line
        version = buildLabel
}

def prepEnv = hasProperty('deployEnv') ? deployEnv : ''

ext {
        group = 'com.onefbusa.cs'
        // buildBranch is passed in through bamboo or command line
        branch = buildBranch
        vendor = '1st Financial Bank'
        appname = 'cs'
        buildDate = new Date().format('MMMMM dd yyyy')
        buildTime = new Date().format('MMMddyy H:mm')

        // define shared version number
        springframework_version = '3.0.2.RELEASE'
        struts_version = '1.3.10'

        // directory locations for cs
        csSrcDir = "src"
        csWarDir = "war"
        csPageDir = "war/page"
        csConfigDir = "war/WEB-INF/config"
        csWebDir = "war/WEB-INF/web.xml.config"
        csTempWarDir = "/1fb/home/build/gradle/tmp/${appname}/build"
        csExplodeDir = "/1fb/home/build/gradle/extracted/${appname}"
        stageDir = file("/1fb/home/build/stage/${appname}/${version}")
        stageDirEnv = file("${stageDir}/${prepEnv}")

        scriptDir = '/1fb/home/build/jdev/scripts/scripts/deploy10gr3'
        propsFileLocation = checkoutDir
        propertiesFile = 'envvalues.properties'
        warfileName = "${csExplodeDir}/${appname}.${version}.${prepEnv}.war"

        // determine staging directory on sfobuild
        if(branch.equals("master") || branch.isEmpty()) {
                tempStageDir = file("/1fb/stage/${appname}/${version}")
        } else {
                tempStageDir = file("/1fb/stage/${appname}.${branch}/${version}")
        }
}

sourceSets {
        main {
                java {
                        srcDir csSrcDir
                }
        }
}
compileJava.options.encoding = "ISO-8859-1"

war {
        /*
         * create a file tree
         * from 'cs/war/WEB-INF/config/log4j'
         * from 'cs/war/WEB-INF/config/owasp'
         * from 'cs/war/WEB-INF/config/resourceBundles'
         * from 'cs/war/WEB-INF/config/spring'
         * from 'cs/war/WEB-INF/config/struts'
         *
         * csConfigDir = '/1fb/home/build/jdev/cs/cs/war/WEB-INF/config'
         */
        FileTree configFiles = fileTree(csConfigDir) {
                include '**/*.properties'
                include '**/*.xml'
                include '**/*.dtd'
                include '**/*.xsd'
        }

        webInf {
                // copy files into 'WEB-INF/classes'
                description '[copy] Copying files to **/WEB-INF/classes'
                into('classes') {
                        from {
                                configFiles.files
                        }
                }
        }

        exclude ('**/WEB-INF/config/**')
        exclude ('**/WEB-INF/web.xml.config/**')

        webXml = file("${csWebDir}/web.xml")
        outputs.upToDateWhen { false }  // always compile war

        manifest {
                attributes (
                        'cs',
                        'Specification-Version': "cs version ${version}",
                        'Specification-Vendor': vendor,
                        'Implementation-Version': version,
                        'Implementation-Vendor': vendor,
                        'Build-Date': "${buildDate}",
                        'Build-Time': "cs ${buildTime} CT"
                )
        }
}
webAppDirName = "${csWarDir}"
war.archiveName = "${appname}-${version}.war"

publishing {
        publications {
                mavenJava(MavenPublication) {
                        from components.web
                }
        }
}
/*
 * These folders are created when the war is created:
 * /1fb/home/build/gradle/tmp/classes
 * /1fb/home/build/gradle/tmp/dependency-cache
 * /1fb/home/build/gradle/tmp/libs -> location of war
 * /1fb/home/build/gradle/tmp/tmp  -> location of manifest
 */
buildDir = "${csTempWarDir}"

repositories {
        maven {
                url 'https://artifactory.1fbusa.com/artifactory/apps-release'
                credentials {
                        username "${artifactory_user}"
                        password "${artifactory_pass}"
                }
        }
}

dependencies {
        providedCompile(group: 'antlr', name: 'antlr', version: '2.7.2', ext: 'jar')
        providedCompile(group: 'aspectj', name: 'aspectjrt', version: '1.1.1', ext: 'jar')
        providedCompile(group: 'batik', name: 'batik-awt-util', version: '1.6', ext: 'jar')
        providedCompile(group: 'batik', name: 'batik-svggen', version: '1.6', ext: 'jar')
        providedCompile(group: 'batik', name: 'batik-util', version: '1.6', ext: 'jar')
        providedCompile(group: 'bsf', name: 'bsf', version: '2.3.0', ext: 'jar')
        providedCompile(group: 'org.apache.cactus', name: 'cactus', version: '1.6', ext: 'jar')
        providedCompile(group: 'cewolf', name: 'cewolf', version: '1.0', ext: 'jar')
        providedCompile(group: 'cglib', name: 'cglib', version: '2.0-rc2', ext: 'jar')
        providedCompile(group: 'com.onefbusa.collegedata', name: 'copyutil', version: '1.0', ext: 'jar')
        providedCompile(group: 'com.onefbusa.collegedata', name: 'cssecurityservice', version: '02_00_002', ext:'jar')
        providedCompile(group: 'com.onefbusa.collegedata', name: 'cs_ath', version: '1.0', ext: 'jar')
        providedCompile(group: 'dom4j', name: 'dom4j', version: '1.4', ext: 'jar')
        providedCompile(group: 'org.directwebremoting', name: 'dwr', version: '2.0.3', ext: 'jar')
        providedCompile(group: 'ehcache', name: 'ehcache', version: '0.6', ext: 'jar')
        providedCompile(group: 'com.google.code.gson', name: 'gson', version: '1.7.1', ext: 'jar')
        providedCompile(group: 'hibernate', name: 'hibernate', version: '2.1.2', ext: 'jar')
        providedCompile(group: 'org.hibernate', name: 'hibernate-core', version: '4.2.2.Final', ext: 'jar')
        providedCompile(group: 'org.hibernate', name: 'hibernate-ehcache', version: '4.2.2.Final', ext: 'jar')
        providedCompile(group: 'org.hibernate.javax.persistence', name: 'hibernate-jpa-2.0-api', version: '1.0.1.Final', ext: 'jar')
        providedCompile(group: 'itext', name: 'itext', version: '1.02b', ext: 'jar')
        providedCompile(group: 'org.codehaus.jackson', name: 'jackson-mapper-asl', version: '1.3.0', ext: 'jar')
        providedCompile(group: 'org.codehaus.jackson', name: 'jackson-core-asl', version: '1.3.0', ext: 'jar')
        providedCompile(group: 'oro', name: 'jakarta-oro', version: '2.0.7', ext: 'jar')
        providedCompile(group: 'org.javassist', name: 'javassist', version: '3.15.0-GA', ext: 'jar')
        providedCompile(group: 'jfree', name: 'jcommon', version: '1.0.10', ext: 'jar')
        providedCompile(group: 'jfree', name: 'jfreechart', version: '1.0.6', ext: 'jar')
        providedCompile(group: 'org.jsoup', name: 'jsoup', version: '1.5.2', ext: 'jar')
        providedCompile(group: 'javax.servlet', name: 'jstl', version: '1.1.2', ext: 'jar')
        providedCompile(group: 'junit', name: 'junit', version: '3.8.1', ext: 'jar')
        providedCompile(group: 'log4j', name: 'log4j', version: '1.2.8', ext: 'jar')
        providedCompile(group: 'odmg', name: 'odmg', version: '3.0', ext: 'jar')
        providedCompile(group: 'com.oracle', name: 'ojdbc14_g', version: '10.2.0.2.0', ext: 'jar')
        providedCompile(group: 'oro', name: 'oro', version: '2.0.8', ext: 'jar')
        providedCompile(group: 'org.zefer.pd4ml', name: 'pd4ml', version: '3.9.1', ext: 'jar')
        providedCompile(group: 'org.zefer.pd4ml', name: 'pd4ml_tl', version: '1.0', ext: 'jar')
        providedCompile(group: 'javax.servlet', name: 'servlet', version: 'servlet', ext: 'jar')
        providedCompile(group: 'org.slf4j', name: 'slf4j-api', version: '1.6.1', ext: 'jar')
        providedCompile(group: 'org.zefer.pd4ml', name: 'ss_css2', version: '1.0', ext: 'jar')
        providedCompile(group: 'taglibs', name: 'standard', version: '1.1.2', ext: 'jar')
        providedCompile(group: 'taglibs', name: 'log', version: '1.0', ext: 'jar')

        providedCompile(group: 'commons-beanutils', name: 'commons-beanutils', version: '1.8.0', ext: 'jar')
        providedCompile(group: 'commons-chain', name: 'commons-chain', version: '1.2', ext: 'jar')
        providedCompile(group: 'commons-codec', name: 'commons-codec', version: '1.4', ext: 'jar')
        providedCompile(group: 'commons-collections', name: 'commons-collections', version: '3.0', ext: 'jar')
        providedCompile(group: 'commons-configuration', name: 'commons-configuration', version: '1.6', ext: 'jar')
        providedCompile(group: 'commons-dbcp', name: 'commons-dbcp', version: '1.1', ext: 'jar')
        providedCompile(group: 'commons-digester', name: 'commons-digester', version: '1.8', ext: 'jar')
        providedCompile(group: 'commons-email', name: 'commons-email', version: '1.0', ext: 'jar')
        providedCompile(group: 'commons-fileupload', name: 'commons-fileupload', version: '1.1.1', ext: 'jar')
        providedCompile(group: 'commons-io', name: 'commons-io', version: '1.1', ext: 'jar')
        providedCompile(group: 'commons-jxpath', name: 'commons-jxpath', version: '1.3', ext: 'jar')
        providedCompile(group: 'commons-lang', name: 'commons-lang', version: '2.2', ext: 'jar')
        providedCompile(group: 'commons-logging', name: 'commons-logging', version: '1.0.4', ext: 'jar')
        providedCompile(group: 'commons-pool', name: 'commons-pool', version: '1.1', ext: 'jar')
        providedCompile(group: 'commons-validator', name: 'commons-validator', version: '1.3.1', ext: 'jar')

        providedCompile(group: 'org.springframework', name: 'org.springframework.aop', version: "${springframework_version}", ext: 'jar')
        providedCompile(group: 'org.springframework', name: 'org.springframework.asm', version: "${springframework_version}", ext: 'jar')
        providedCompile(group: 'org.springframework', name: 'org.springframework.aspects', version: "${springframework_version}", ext: 'jar')
        providedCompile(group: 'org.springframework', name: 'org.springframework.beans', version: "${springframework_version}", ext: 'jar')
        providedCompile(group: 'org.springframework', name: 'org.springframework.context', version: "${springframework_version}", ext: 'jar')
        providedCompile(group: 'org.springframework', name: 'org.springframework.context.support', version: "${springframework_version}", ext: 'jar')
        providedCompile(group: 'org.springframework', name: 'org.springframework.core', version: "${springframework_version}", ext: 'jar')
        providedCompile(group: 'org.springframework', name: 'org.springframework.expression', version: "${springframework_version}", ext: 'jar')
        providedCompile(group: 'org.springframework', name: 'org.springframework.jdbc', version: "${springframework_version}", ext: 'jar')
        providedCompile(group: 'org.springframework', name: 'org.springframework.orm', version: "${springframework_version}", ext: 'jar')
        providedCompile(group: 'org.springframework', name: 'org.springframework.transaction', version: "${springframework_version}", ext: 'jar')
        providedCompile(group: 'org.springframework', name: 'org.springframework.web', version: "${springframework_version}", ext: 'jar')
        providedCompile(group: 'org.springframework', name: 'org.springframework.web.servlet', version: "${springframework_version}", ext: 'jar')

        providedCompile(group: 'org.apache.struts', name: 'struts-core', version: "${struts_version}", ext: 'jar')
        providedCompile(group: 'org.apache.struts', name: 'struts-el', version: "${struts_version}", ext: 'jar')
        providedCompile(group: 'org.apache.struts', name: 'struts-extras', version: "${struts_version}", ext: 'jar')
        providedCompile(group: 'org.apache.struts', name: 'struts-taglib', version: "${struts_version}", ext: 'jar')
        providedCompile(group: 'org.apache.struts', name: 'struts-tiles', version: "${struts_version}", ext: 'jar')
}

task copyWar() << {
        def csWar = file("${csTempWarDir}/libs/${war.archiveName}")

        // Clean old build if it exists
        if(tempStageDir.exists()) {
                delete tempStageDir
                println "[echo] Removed directory: ${tempStageDir}\n"

                tempStageDir.mkdirs()
                println "[echo] Created directory: ${tempStageDir}\n"
        } else {
                tempStageDir.mkdirs()
                println "[echo] Created directory: ${tempStageDir}\n"
        }

        // Verify that the build was successful
        if(!csWar.exists()) {
                throw new GradleException("*** ERROR: Build was not successfully created (Could not find ${csWar}). Please run the build again. ***");
        }

        if(csWar.exists()) {
                copy {
                        from(csWar)
                        into(tempStageDir)
                }
        }
}

// cleanup
task deleteDir() {
        doLast {
                delete "${csTempWarDir}"
                println "[echo] Deleted directory: ${csTempWarDir}"
        }
}
build.finalizedBy(copyWar)
copyWar.finalizedBy(deleteDir)

// Check env variable passed to the script
task checkEnv() << {
        switch ("${deployEnv}") {
                case "dev":
                        //prepEnv = "dev"
                        println "Environment is set to: $prepEnv"
                        break;
                case "ito":
                        //prepEnv = "ito"
                        println "Environment is set to: $prepEnv"
                        break;
                case "ito2":
                        //prepEnv = "ito2"
                        println "Environment is set to: $prepEnv"
                        break;
                case "blr":
                        //prepEnv = "blr"
                        println "Environment is set to: $prepEnv"
                        break;
                case "qa":
                        //prepEnv = "qa"
                        println "Environment is set to: $prepEnv"
                        break;
                case "qa2":
                        //prepEnv = "qa2"
                        println "Environment is set to: $prepEnv"
                        break;
                case "stg":
                        //prepEnv = "stg"
                        println "Environment is set to: $prepEnv"
                        break;
                case "prod":
                        //prepEnv = "prod"
                        println "Environment is set to: $prepEnv"
                        break;
                case "usbcp":
                        //prepEnv = "usbcp"
                        println "Environment is set to: $prepEnv"
                        break;
                default:
                        throw new RuntimeException("Environment error: Can not identify ${deployEnv}");
        }
}

task postBuildProcess() << {
        def buildanddeployDir = file("${propsFileLocation}/${appname}/buildanddeploy")
        def csWar = file("${tempStageDir}/${war.archiveName}")

        // Clean old build if it exists
        if(stageDirEnv.exists()) {
                delete stageDirEnv
                println "[echo] Removed directory: ${stageDirEnv}\n"

                stageDirEnv.mkdirs()
                println "[echo] Created directory: ${stageDirEnv}"
        } else {
                stageDirEnv.mkdirs()
                println "[echo] Created directory: ${stageDirEnv}"
        }

        // Verify that the buildanddeploy folder exists and the build was successful
        if(!buildanddeployDir.exists()) {
                throw new GradleException("*** ERROR: Could not find buildanddeploy folder for ${appname} ***");
        }
        if(!csWar.exists()) {
                throw new GradleException("*** ERROR: Build was not found (Could not find ${csWar}). Please run the build again. ***");
        }

        if(buildanddeployDir.exists() && csWar.exists()) {
                copy {
                        from(buildanddeployDir)
                        into(stageDirEnv)
                        exclude "securityservice*.properties"
                }
        }
}

// Expand the war file into a temporary location
task explodeWar() << {
        println "[echo] exploding the applications war file for the app ${appname}"
        delete csExplodeDir
        copy {
                from zipTree("${tempStageDir}/${appname}-${version}.war")
                into csExplodeDir
        }
}

// Extract proper environment properties
task propScripts() << {
        println "[echo] Checking if envvalues.properties file exists"
        ant.exec(executable: "${scriptDir}/checkeof_new.sh", resultproperty: 'status1', failonerror: true) {
                arg(value: appname)
        }
        statusCheck(ant.properties['status1'])

        println '[echo] Extracting properties according to the deploy environment'
        ant.exec(executable: scriptDir + '/extractenvprops_WL.sh', resultproperty: 'status2', failonerror: true) {
                arg(value: prepEnv)
                arg(value: 'envvalues*.properties')
                arg(value: appname)
                arg(value: propsFileLocation)
                arg(value: "${buildLabel}")
        }
        statusCheck(ant.properties['status2'])
}

// Replace properties with the proper environment variables
task substituteEnvValues(dependsOn: [propScripts]) << {
        def replacePropFile = "${csExplodeDir}/envvalues.properties.${prepEnv}"
        ant.replace(dir: csExplodeDir, replacefilterfile: replacePropFile, summary: 'yes') {
                include(name: '**/*.xml')
                include(name: '**/*.jsp')
                include(name: '**/*.js')
                include(name: '**/environment*.properties')
                include(name: '**/hibernate.cfg.properties')
                include(name: '**/ESAPI*.properties')
                exclude(name: '**/envvalues*.properties')
        }

        ant.replace(dir: stageDirEnv, replacefilterfile: replacePropFile, summary: 'yes') {
                include(name: '**/libraries.properties')
                include(name: '**/deploy.properties')
                include(name: '**/*_data_source.properties')
                exclude(name: '**/envvalues*.properties')
        }
}

// Re-zip the war file
task warChanges() << {
        println "[echo] Building war file and copying to ${stageDir}"
        ant.jar(destfile: warfileName, basedir: csExplodeDir, excludes: "**/envvalues*.properties*, **/securityservice.*.properties") {
                delegate.manifest() {
                        section(name: "${appname}")
                        attribute(name: 'Specification-Version', value: "cs version ${version}")
                        attribute(name: 'Specification-Vendor', value: "${vendor}")
                        attribute(name: 'Implementation-Version', value: "${version}")
                        attribute(name: 'Implementation-Vendor', value: "${vendor}")
                        attribute(name: 'Build-Date', value: "${buildDate}")
                        attribute(name: 'Build-Time', value: "cs ${buildTime} CT")
                }
        }
        ant.checksum(file: warfileName, fileext: '.md5')

        println "[echo] Copying war file to ${stageDirEnv}/war"
        copy {
                from(warfileName)
                into(stageDirEnv)
                rename "${appname}.${version}.${prepEnv}.war", "${appname}.war"
        }
        delete csExplodeDir

        task(zipArtifacts, type: Zip) {
                from stageDirEnv
                archiveName "${appname}_${version}_${prepEnv}.zip"
                destinationDir(file("${stageDir}"))
        }.execute()

        delete stageDirEnv
}

task prepare() {
        dependsOn checkEnv, postBuildProcess, explodeWar, substituteEnvValues, warChanges

        warChanges.dependsOn substituteEnvValues
        substituteEnvValues.dependsOn explodeWar
        explodeWar.dependsOn postBuildProcess
        postBuildProcess.dependsOn checkEnv
}

public void statusCheck(def result) {
        if(result.equals('0')) {
                println '[echo] ********** TASK COMPLETED SUCCESSFULLY **********'
        }
        if(result.equals('1')) {
                println '[echo] ********** TASK COMPLETED WITH WARNING(S) **********'
        }
        if(result.equals('2')) {
                println '[echo] ********** TASK FAILED WITH FATAL ERROR(S) **********'
                throw new Exception('A deployment task has failed.')
        }
}
